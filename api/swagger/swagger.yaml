swagger: "2.0"
info:
  version: "0.0.1"
  title: Applesauce
  description: Here to solve all of your logging needs
host: localhost:10010
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  X-Access-Token:
    name: X-Access-Token
    in: header
    description: The token to prove you're a user
    type: apiKey
security: [
  {
  X-Access-Token: []
  }
  ]
tags: [
  {
    name: diary,
    description: Diary operations
  },
  {
    name: logging,
    description: Loggin operations
  },
  {
    name: users,
    description: User operations
  },
  {
    name: authentication,
    description: Authentication operations
  }
  ]
paths:
  /diaries/{diaryId}:
    x-swagger-router-controller: diaries
    get:
      tags: [
        diary
        ]
      summary: Get a diary by id
      description: Pass in the diary id and get back a diary object
      operationId: getDiary
      parameters:
        - name: diaryId
          in: path
          description: Id of diary to fetch
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Diary"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /diaries/{diaryId}/entries:
    x-swagger-router-controller: diaries
    parameters:
      - name: diaryId
        in: path
        description: Id of diary to fetch entries from
        type: string
        required: true
    get:
      tags: [
        diary,
        logging
        ]
      summary: Get a diary's entries
      description: Pass in the diary id and get back an array of diary entries objects
      operationId: getDiaryEntries
      parameters:
        - name: metaOnly
          in: query
          required: false
          description: whether or not to return only the count
          type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              count:
                type: number
              entries:
                type: array
                items:
                  $ref: "#/definitions/Entry"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [
        diary,
        logging
        ]
      summary: post an entry to a diary
      operationId: createLog
      parameters:
        - name: entry
          in: body
          description: entry to persist
          schema:
            $ref: "#/definitions/Entry"
      responses:
        303:
          description: Success
          headers:
            Location:
              description: "Location of new Entry"
              type: string
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /diaries/{diaryId}/entries/{entryId}:
    x-swagger-router-controller: diaries
    get:
      tags: [
        diary,
        logging
        ]
      summary: get an entry from a diary
      operationId: getDiaryEntry
      parameters:
        - name: diaryId
          in: path
          description: Id of the diary to look into
          type: string
          required: true
        - name: entryId
          in: path
          description: Id of the entry to look into
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Entry"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /diaries/{diaryId}/users:
    x-swagger-router-controller: diaries
    get:
      tags: [
        diary,
        users
        ]
      summary: Get a diary's users
      operationId: getDiaryUsers
      parameters:
        - name: diaryId
          in: path
          description: Id of diary to fetch users from
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: string
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [
        users,
        diary
        ]
      summary: Add a user to a diary
      operationId: addDiaryUser
      parameters:
        - name: diaryId
          in: path
          description: Id of diary to fetch users from
          type: string
          required: true
        - name: user
          in: body
          description: the user's email to add
          required: true
          schema:
            $ref: "#/definitions/AddUserRequest"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags: [
        users,
        diary
        ]
      summary: Remove a user from a diary
      operationId: removeDiaryUser
      parameters:
        - name: diaryId
          in: path
          description: Id of diary to modify
          type: string
          required: true
        - name: user
          in: query
          description: the user's email to remove
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /diaries:
    x-swagger-router-controller: diaries
    get:
      tags: [
        diary
        ]
      summary: Get all diary
      operationId: getDiaries
      parameters:
        - name: search
          in: query
          description: Partial ID of diary to fetch, must be from the end of the ID
          type: string
          required: false
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Diary"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [
        diary
        ]
      summary: Create a diary
      operationId: createDiary
      parameters:
        - name: diary
          in: body
          description: Diary to create
          schema:
            $ref: "#/definitions/Diary"
      responses:
        303:
          description: Success
          headers:
            Location:
              description: "Location of new diary"
              type: string
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{userId}:
    x-swagger-router-controller: users
    get:
      tags: [
        users
        ]
      summary: Fetch a user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: Id of user to fetch. Can be "me" if authenticated
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      tags: [
        users
        ]
      summary: Update a user's email or password
      operationId: editUser
      parameters:
        - name: userId
          in: path
          description: Id of user to update. Can be "me" if authenticated
          type: string
          required: true
        - name: user
          in: body
          description: User to update with params; all params are optional
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/auth:
    x-swagger-router-controller: users
    post:
      tags: [
        users,
        authentication
        ]
      summary: Authenticate a user
      description: Submits the user's credentials in exchange for a token to be used in the 'x-access-token' header in subsequent requests
      operationId: auth
      security: []
      parameters:
        - name: credentials
          in: body
          description: The credentials of the user to log in
          schema:
            $ref: "#/definitions/AuthenticationRequest"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/AuthenticationResponseSuccess"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    x-swagger-router-controller: users
    get:
      tags: [
        users
        ]
      summary: Gets all of the users the current user has permission to see
      operationId: listUsers
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: [
        users
        ]
      summary: Creates a user
      description: Creates a user. Can be done without authentication; this is where you'll create a new user for yourself.
      operationId: createUser
      security: []
      parameters:
        - name: user
          in: body
          description: User to create
          schema:
            $ref: "#/definitions/User"
      responses:
        303:
          description: Success
          headers:
            Location:
              description: "Location of new user"
              type: string
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  AddUserRequest:
    type: object
    required:
      - email
    properties:
      email:
        type: string
  AuthenticationRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  AuthenticationResponseSuccess:
    properties:
      token:
        type: string
  SuccessResponse:
    properties:
      status:
        type: number
      message:
        type: string
  ErrorResponse:
    properties:
      status:
        type: number
      message:
        type: string
  User:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  Diary:
    type: object
    properties:
      _id:
        type: string
      users:
        type: array
        items: 
          type: string
      name:
        type: string
      entries:
        type: array
        items:
          $ref: "#/definitions/Entry"
  Entry:
    type: object
    properties:
      level:
        type: string
      message:
        type: string
      code:
        type: string
      ip:
        type: string